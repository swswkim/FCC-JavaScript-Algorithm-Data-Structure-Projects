Test Method (Returns true of false if there is a match)
testRegex.test(testStr);

Match Method (Extracts actual matches)
testRegex.match(matchStr);


|   =  or operator (e.g. /yes|no/;)
/example/i;   =   ignorecase (i.e. not case sensitive. HelLo and hello is equal)
/example/g;   =   to extract a pattern more than once.


***Only effective to characters or character sets next to the signs within)
/./   =   wildcard period ("." can be replaced by any one character) (e.g. let huRegex = /b.g/;) *Can be bag, big, or bug.
/[number-number]/   =   range setter (e.g. /[a-c]/; will include characters a, b, and c) (e.g.2 /[a-z0-9]/; will include characters a to z and numbers 0 to 9)
/[^]/   =   carrot character excludes characters you do not want to match. (e.g. /[^aeiou]/; will not include vowels) (e.g.2 /[^aeiou^0-9]/; will not include vowels and numbers)
/+/   =   Match Characters that Occur One or More Times. (e.g. /a+/g; would find one match in "abc" and return ["a"]. Because of the +, it would also find a single match in "aabc" and return ["aa"].)
/*/   =   Match Characters that Occur Zero or More Times (e.g. /go*/; would find one match in "gooooooooal!" and return ["goooooooo"]. It would also find a single match in "gut feeling" and return ["g"].


- [Default] Greedy match finds the longest possible part of a string that fits the regex pattern and returns it as a match.
- [? character is used for lazy match] Lazy match, which finds the smallest possible part of the string that satisfies the regex pattern.

/^example/   =   Outside of a character set, the caret is used to search for patterns at the beginning of strings.
/example$/   =   You can search the end of strings using the dollar sign character $ at the end of the regex.

\w  =   [A-Za-z0-9_]  Matches all letters and numbers + "_" underscore.
\W  =   [^A-Za-z0-9_] Matches everything but letters and numbers + "_" underscore.
\d  =   [0-9]   Match all numbers.
\D  =   [^0-9]  Match everything but numbers.

/\s/  =   Searching for whitespace. (e.g. let spaceRegex = /\s/g;   // Returns [" ", " "]) This pattern not only matches whitespace, but also carriage return, tab, form feed, and new line characters.
/\S/  =   This pattern will not match whitespace, carriage return, tab, form feed, and new line characters.

Quantity specifiers = For example, to match only the letter a appearing between 3 and 5 times in the string "ah", your regex would be /a{3,5}h/;
/a{3,5}h/;  =   This means to find a "a" that appears between 3 to 5 times.

Specifying only the lower number of matches.
For example, to match only the string "hah" with the letter a appearing at least 3 times, your regex would be /ha{3,}h/;

Specifying exact number of matches.
For example, to match only the word "hah" with the letter a 3 times, your regex would be /ha{3}h/;

Check for all or none.
?   =   This checks for zero or one of the preceding element. You can think of this symbol as saying the previous element is optional.
let american = "color";   // Returns True
let british = "colour";   // Returns True
let rainbowRegex= /colou?r/;  // Checks for "u" but does not care if it exists or not.

Positive and Negative Lookahead
A positive lookahead will look to make sure the element in the search pattern is there, but won't actually match it.
A positive lookahead is used as (?=...) where the ... is the required part that is not matched.

On the other hand, a negative lookahead will look to make sure the element in the search pattern is not there.
A negative lookahead is used as (?!...) where the ... is the pattern that you do not want to be there. The rest of the pattern is returned if the negative lookahead part is not present.

Example: Use lookaheads in the pwRegex to match passwords that are greater than 5 characters long, do not begin with numbers, and have two consecutive digits.
let sampleWord = "astronaut";
let pwRegex = /^\D(?=\w{5})(?=\w*\d{2})/;
let result = pwRegex.test(sampleWord);

Check For Mixed Grouping of Characters - to check for groups of characters using a Regular Expression, we use parentheses ().
If you want to find either Penguin or Pumpkin in a string, you can use the following Regular Expression: /P(engu|umpk)in/g

Reuse Patterns Using Capture Groups
Search for repeat substrings using capture groups. Parentheses, ( and ), are used to find repeat substrings.
To specify where that repeat string will appear, you use a backslash (\) and then a number. This number starts at 1 and increases with each additional capture group you use. An example would be \1 to match the first group.

Use Capture Groups to Search and Replace
Search and replace text in a string using .replace() on a string.
You can also access capture groups in the replacement string with dollar signs ($).

Remove Whitespace from Start and End
String.prototype.trim();
Using regular expressions - let wsRegex = /^(\s+)|(\s+)$/g;
